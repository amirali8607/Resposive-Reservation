// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  DOCTOR
}

model User {
  id          String        @id @default(cuid())
  image       String?
  name        String?
  email       String        @unique
  password    String
  phonenumber String
  status      String?
  color       String?
  role        UserRole      @default(USER)
  createdAt   String?
  updatedAt   DateTime      @updatedAt
  lists       Reservelist[]
  doctors     Doctors[]
  tricks      Tricks[]
  likes       Like[]
}

model Doctors {
  id        String        @id @default(cuid())
  name      String        @unique
  body      String
  expertise String
  addres    String
  userId    String
  user      User?         @relation(fields: [userId], references: [id])
  lists     Reservelist[]
  tricks    Tricks[]
}

model Siknesslist {
  id          Int     @id @default(autoincrement())
  title       String  @unique
  description String
  stock       String
  createdAt   String?
  image       String?
  compare     String?
  likes       Like[]
}

model Like {
  id        String      @id @default(cuid())
  postId    Int
  post      Siknesslist @relation(fields: [postId], references: [id])
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  createdAt String
}

model Tricks {
  id       String  @id @default(cuid())
  times    String
  doctorId String
  doctor   Doctors @relation(fields: [doctorId], references: [id])
  userId   String
  user     User    @relation(fields: [userId], references: [id])
}

model Reservelist {
  id       String  @id @default(cuid())
  time     String?
  userId   String
  doctorId String
  user     User    @relation(fields: [userId], references: [id])
  doctor   Doctors @relation(fields: [doctorId], references: [id])
}
